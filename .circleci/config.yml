version: 2

references:
  container_config: &container_config
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          ECR_DOCKER_REGISTRY: "926803513772.dkr.ecr.eu-west-1.amazonaws.com"
          ECR_DOCKER_IMAGE: "laa-get-access/laa-cla-public"
          GITHUB_TEAM_NAME_SLUG: laa-get-access
          APPLICATION_DEPLOY_NAME: laa-cla-public
jobs:
  build:
    docker:
      - image: docker:18.09-git
    environment:
      ECR_DOCKER_REGISTRY: "926803513772.dkr.ecr.eu-west-1.amazonaws.com"
      ECR_DOCKER_IMAGE: "laa-get-access/laa-cla-public"
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Login to the ECR Docker registry
          command: |
            if [ -z "$CIRCLE_PR_NUMBER" ]; then
              apk add --no-cache --no-progress py2-pip
              pip install awscli
              ecr_login="$(aws ecr get-login --region eu-west-1 --no-include-email)"
              ${ecr_login}
            else
              echo "We do not need to authenticate for forked pull requests."
            fi
      - run:
          name: Build Docker image
          command: |
            docker build --tag application:$CIRCLE_SHA1 \
              --label build.git.sha=$CIRCLE_SHA1 \
              --label build.git.branch=$CIRCLE_BRANCH \
              --label build.url=$CIRCLE_BUILD_URL \
              .
      - run:
          name: Validate Python version
          command: docker run --rm --tty --interactive application:$CIRCLE_SHA1 python --version | grep "2.7"
      - run:
          name: Validate that image runs on Europe/London timezone
          command: docker run --rm --tty --interactive application:$CIRCLE_SHA1 date '+%Z' | egrep "(GMT|BST)"
      - run:
          name: Tag and push Docker images
          command: |
            if [ -z "$CIRCLE_PR_NUMBER" ]; then
              .circleci/tag_and_push_docker_image application:$CIRCLE_SHA1
            else
              echo "We do not need to push Docker images for forked pull requests."
            fi
  lint:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv lint-env
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/lint.txt" }}
      - run:
          name: Install dependencies
          command: |
            source lint-env/bin/activate
            pip install --requirement requirements/lint.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/lint.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Lint with flake8
          command: |
            source lint-env/bin/activate
            flake8 --exit-zero cla_public
      - run:
          name: Check formatting with Black
          command: |
            source lint-env/bin/activate
            black --check cla_public
  test:
    docker:
      - image: circleci/python:2.7
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv env
            source env/bin/activate
            pip install pip==18.1

      - restore_cache:
          keys:
            - pip-v2-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/test.txt" }}
      - run:
          name: Install dependencies
          command: |
            source env/bin/activate
            pip install --requirement requirements.txt --requirement requirements/test.txt
            pip check
      - save_cache:
          key: pip-v2-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/test.txt" }}
          paths:
            - "~/.cache/pip"

      - run:
          name: Run unit tests
          command: |
            source env/bin/activate
            python manage.py test

  staging_deploy:
    <<: *container_config
    steps:
      - checkout
      - run:
          name: Initialise Kubernetes staging context
          command: |
            setup-kube-auth
            kubectl config use-context staging
      - deploy:
          name: Deploy laa-cla-public to staging
          command: .circleci/deploy_to_kubernetes staging
      - deploy:
          name: Notify Slack channel
          command: .circleci/notify_slack_channel staging

  production_deploy:
    <<: *container_config
    steps:
      - checkout
      - run:
          name: Initialise Kubernetes production context
          command: |
            setup-kube-auth
            kubectl config use-context production
      - deploy:
          name: Deploy laa-cla-public to production
          command: .circleci/deploy_to_kubernetes production
      - deploy:
          name: Notify Slack channel
          command: .circleci/notify_slack_channel production

workflows:
  version: 2
  build-test-and-approval-deploy:
    jobs:
      - lint
      - test
      - build:
          requires:
            - lint
            - test
      - staging_deploy_approval:
          type: approval
          requires:
            - build
      - staging_deploy:
          requires:
            - staging_deploy_approval
      - production_deploy_approval:
          type: approval
          requires:
            - staging_deploy
          filters:
            branches:
              only:
                - master
      - production_deploy:
          requires:
            - production_deploy_approval
