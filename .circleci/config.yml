version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  cla-end-to-end-tests: ministryofjustice/cla-end-to-end-tests@volatile
jobs:
  build:
    docker:
      - image: docker:19.03-git
    steps:
      - checkout
      - setup_remote_docker:
          version: "19.03.13"
          docker_layer_caching: true
      - run:
          name: Login to the ECR Docker registry
          command: |
            if [ -z "$CIRCLE_PR_NUMBER" ]; then
              apk add --no-cache --no-progress py3-pip
              pip install awscli
              ecr_login="$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)"
              ${ecr_login}
            else
              echo "We do not need to authenticate for forked pull requests."
            fi
      - run:
          name: Build Docker image
          command: |
            docker build --tag application:$CIRCLE_SHA1 \
              --label build.git.sha=$CIRCLE_SHA1 \
              --label build.git.branch=$CIRCLE_BRANCH \
              --label build.url=$CIRCLE_BUILD_URL \
              .
      - run:
          name: Validate Python version
          command: docker run --rm --tty --interactive application:$CIRCLE_SHA1 python --version | grep "2.7"
      - run:
          name: Validate that image runs on Europe/London timezone
          command: docker run --rm --tty --interactive application:$CIRCLE_SHA1 date '+%Z' | egrep "(GMT|BST)"
      - run:
          name: Tag and push Docker images
          command: |
            if [ -z "$CIRCLE_PR_NUMBER" ]; then
              .circleci/tag_and_push_docker_image application:$CIRCLE_SHA1
            else
              echo "We do not need to push Docker images for forked pull requests."
            fi
  lint-with-py2-tools:
    docker:
      - image: cimg/python:2.7
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv py2-lint-env
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/generated/requirements-py2-lint.txt" }}
      - run:
          name: Install dependencies
          command: |
            source py2-lint-env/bin/activate
            pip install --requirement requirements/generated/requirements-py2-lint.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/generated/requirements-py2-lint.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Lint with flake8
          command: |
            source py2-lint-env/bin/activate
            flake8 cla_public
  format-with-py3-tools:
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv format-env
      - restore_cache:
          keys:
            - pip-v1-black-18.9b0
      - run:
          name: Install dependencies
          command: |
            source format-env/bin/activate
            pip install black==18.9b0
      - save_cache:
          key: pip-v1-black-18.9b0
          paths:
            - "~/.cache/pip"
      - run:
          name: Check formatting with Black
          command: |
            source format-env/bin/activate
            black --check --diff cla_public
  accessibility-test:
    docker:
      - image: circleci/python:latest-node-browsers
    steps:
      # Add the necessary steps to deploy your website.
      - checkout
      - run:
          name: Delete existing javascript packages
          command: |
            rm -rf node_modules package.json package-lock.json
      - run:
          name: Extract staging URL
          command: |
            source .circleci/define_build_environment_variables
            echo "export RELEASE_HOST=$CLEANED_BRANCH_NAME.$STAGING_HOST" >> $BASH_ENV
      - run:
          name: Install cypress and axe-core
          command: |
            cd accessibility_tests
            npm install
      - run:
          name: Run accessibility test
          command: |
            cd accessibility_tests
            mkdir cypress/pages
            node node_modules/.bin/cypress run --env UAT_URL=https://$RELEASE_HOST/start --spec "cypress/integration/happy-path.spec.js"
      - store_artifacts:
          path: ~/project/accessibility_tests/cypress/videos
  test:
    docker:
      - image: cimg/python:2.7
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv env
            source env/bin/activate
            pip install pip==18.1

      - restore_cache:
          keys:
            - pip-v2-{{ checksum "requirements/generated/requirements-production.txt" }}-{{ checksum "requirements/generated/requirements-testing.txt" }}
      - run:
          name: Install dependencies
          command: |
            source env/bin/activate
            pip install --requirement requirements/generated/requirements-testing.txt
            pip check
            # Don't do pip check for packages installed with --no-deps as that will complain about missing dependencies
            pip install --requirement requirements/generated/requirements-no-deps.txt --no-deps
      - save_cache:
          key: pip-v2-{{ checksum "requirements/generated/requirements-testing.txt" }}-{{ checksum "requirements/generated/requirements-no-deps.txt" }}
          paths:
            - "~/.cache/pip"

      - run:
          name: Run unit tests
          command: |
            source env/bin/activate
            coverage run manage.py test
            coverage report -m
            coverage html
            coveralls
      - store_artifacts:
          path: htmlcov
          destination: coverage
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

  staging_deploy:
    parameters:
      multideploy:
        type: boolean
        default: false
    docker:
      - image: ministryofjustice/cloud-platform-tools
    steps:
      - checkout
      - run:
          name: Install helm v3
          command: |
            wget https://get.helm.sh/helm-v3.2.4-linux-amd64.tar.gz
            tar -zxvf helm-v3.2.4-linux-amd64.tar.gz
            mv linux-amd64/helm /usr/local/bin/helm
      - run:
          name: Authenticate with cluster
          command: .circleci/authenticate_with_kubernetes_cluster
      - unless:
          condition: << parameters.multideploy >>
          steps:
            - deploy:
                name: Deploy laa-cla-public to fixed staging
                command: |
                  export INGRESS_CLUSTER_NAME=`kubectl get configmap ingress-cluster -o jsonpath='{.data.name}'`
                  export INGRESS_CLUSTER_WEIGHT=`kubectl get configmap ingress-cluster -o jsonpath='{.data.weight}'`
                  source .circleci/define_build_environment_variables
                  ./bin/staging_deploy.sh
                  echo "export RELEASE_HOST=$STAGING_HOST" >> $BASH_ENV
      - when:
          condition: << parameters.multideploy >>
          steps:
            - deploy:
                name: Deploy laa-cla-public to multideploy staging
                command: |
                  export INGRESS_CLUSTER_NAME=`kubectl get configmap ingress-cluster -o jsonpath='{.data.name}'`
                  export INGRESS_CLUSTER_WEIGHT=`kubectl get configmap ingress-cluster -o jsonpath='{.data.weight}'`
                  source .circleci/define_build_environment_variables
                  ./bin/staging_multideploy.sh
                  echo "export RELEASE_HOST=$CLEANED_BRANCH_NAME.$STAGING_HOST" >> $BASH_ENV
      - slack/notify:
          message: ':tada: Deployed branch $CIRCLE_BRANCH'
          title: '$RELEASE_HOST'
          title_link: 'https://$RELEASE_HOST/start'

  cleanup_merged:
    docker:
      - image: ministryofjustice/cloud-platform-tools:2.1
    steps:
      - checkout
      - run:
          name: Install helm v3
          command: |
            wget https://get.helm.sh/helm-v3.2.4-linux-amd64.tar.gz
            tar -zxvf helm-v3.2.4-linux-amd64.tar.gz
            mv linux-amd64/helm /usr/local/bin/helm
      - run:
          name: Authenticate with cluster
          command: .circleci/authenticate_with_kubernetes_cluster
      - run:
          name: Delete staging release
          command: |
            ./bin/delete_staging_release.sh

  production_deploy:
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
    steps:
      - checkout
      - run:
          name: Install helm v3
          command: |
            wget https://get.helm.sh/helm-v3.2.4-linux-amd64.tar.gz
            tar -zxvf helm-v3.2.4-linux-amd64.tar.gz
            mv linux-amd64/helm /usr/local/bin/helm
      - run:
          name: Authenticate with cluster
          command: .circleci/authenticate_with_kubernetes_cluster
      - deploy:
          name: Deploy laa-cla-public to production
          command: |
            export INGRESS_CLUSTER_NAME=`kubectl get configmap ingress-cluster -o jsonpath='{.data.name}'`
            export INGRESS_CLUSTER_WEIGHT=`kubectl get configmap ingress-cluster -o jsonpath='{.data.weight}'`
            source .circleci/define_build_environment_variables
            ./bin/production_deploy.sh
      - slack/notify:
          message: ':tada: Deployed to production'
          title: '$PRODUCTION_HOST'
          title_link: 'https://$PRODUCTION_HOST/start'

workflows:
  version: 2
  build-test-and-approval-deploy:
    jobs:
      - lint-with-py2-tools
      - format-with-py3-tools
      - test
      - cleanup_merged:
          context:
            - laa-cla-public
            - laa-cla-public-live-staging
      - build:
          requires:
            - lint-with-py2-tools
            - format-with-py3-tools
            - test
          context: laa-cla-public
      - cla-end-to-end-tests/behave:
          requires:
            - build
          context: laa-cla-public
          pre-steps:
            - checkout:
                path: cla_public
            - run:
                command: |
                  cd cla_public
                  source .circleci/define_build_environment_variables
                  echo "export CLA_PUBLIC_IMAGE=$ECR_DEPLOY_IMAGE" >> $BASH_ENV
                  echo "export A11Y_ENABLED=true" >> $BASH_ENV
                  echo "Setting CLA Public image $ECR_DEPLOY_IMAGE"
      - staging_deploy_approval:
          type: approval
      # Deploy staging to live (both master and feature branches)
      - staging_deploy:
          requires:
            - build
            - staging_deploy_approval
          context:
            - laa-cla-public
            - laa-cla-public-live-staging
          name: staging_deploy_master
          multideploy: false
          filters:
            branches:
              only:
                - master
      - staging_deploy:
          requires:
            - build
            - staging_deploy_approval
          context:
            - laa-cla-public
            - laa-cla-public-live-staging
          multideploy: true
          filters:
            branches:
              ignore:
                - master

      - accessibility-test:
          requires:
            - staging_deploy
      - production_deploy_approval:
          type: approval
          requires:
            - staging_deploy_master
          filters:
            branches:
              only:
                - master

      - production_deploy:
          name: production_deploy_live
          requires:
            - production_deploy_approval
          context:
            - laa-cla-public
            - laa-cla-public-live-production
