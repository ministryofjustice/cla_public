version: 2
jobs:
  build:
    docker:
      - image: docker:17.03-git
    environment:
      DSD_DOCKER_REGISTRY: "registry.service.dsd.io"
      DSD_DOCKER_IMAGE: "cla_public"
      ECR_DOCKER_REGISTRY: "926803513772.dkr.ecr.eu-west-1.amazonaws.com"
      ECR_DOCKER_IMAGE: "laa-get-access/laa-cla-public"
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.03.0-ce
          docker_layer_caching: true
      - run:
          name: Login to the DSD Docker registry
          command: |
            docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD --email "${DOCKER_USERNAME}@digital.justice.gov.uk" $DSD_DOCKER_REGISTRY
      - run:
          name: Login to the ECR Docker registry
          command: |
            apk add --no-cache --no-progress py2-pip
            pip install awscli
            ecr_login="$(aws ecr get-login --region eu-west-1 --no-include-email)"
            ${ecr_login}
      - run:
          name: Build Docker image
          command: |
            docker build --tag application:$CIRCLE_SHA1 .
      - run:
          name: Validate Python version
          command: docker run --rm --tty --interactive application:$CIRCLE_SHA1 python --version | grep "2.7"
      - run:
          name: Validate that image runs on Europe/London timezone
          command: docker run --rm --tty --interactive application:$CIRCLE_SHA1 date '+%Z' | egrep "(GMT|BST)"
      - run:
          name: Tag and push Docker images
          command: |
            built_tag="application:$CIRCLE_SHA1"
            safe_git_branch=${CIRCLE_BRANCH//\//-}
            short_sha="$(git rev-parse --short=7 $CIRCLE_SHA1)"

            function tag_and_push() {
              tag="$1"
              echo "Tagging and pushing $tag..."
              docker tag $built_tag $tag
              docker push $tag
            }

            if [ "$CIRCLE_BRANCH" == "master" ]; then
              tag_and_push "$ECR_DOCKER_REGISTRY/$ECR_DOCKER_IMAGE:$CIRCLE_SHA1"
              tag_and_push "$DSD_DOCKER_REGISTRY/$DSD_DOCKER_IMAGE:$CIRCLE_SHA1"
              tag_and_push "$DSD_DOCKER_REGISTRY/$DSD_DOCKER_IMAGE:$safe_git_branch.$short_sha"
            fi
            tag_and_push "$ECR_DOCKER_REGISTRY/$ECR_DOCKER_IMAGE:$safe_git_branch"
            tag_and_push "$ECR_DOCKER_REGISTRY/$ECR_DOCKER_IMAGE:$safe_git_branch.$short_sha"
            tag_and_push "$DSD_DOCKER_REGISTRY/$DSD_DOCKER_IMAGE:$safe_git_branch.latest"

  test:
    docker:
      - image: circleci/python:2.7
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv env

      - restore_cache:
          keys:
            - pip-v2-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/test.txt" }}
      - run:
          name: Install dependencies
          command: |
            source env/bin/activate
            pip install --requirement requirements.txt --requirement requirements/test.txt
            pip check
      - save_cache:
          key: pip-v2-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/test.txt" }}
          paths:
            - "~/.cache/pip"

      - run:
          name: Run unit tests
          command: |
            source env/bin/activate
            python manage.py test

  staging_deploy:
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-get-access
          APPLICATION_DEPLOY_NAME: laa-cla-public
    steps:
      - checkout
      - run:
          name: Kubectl deployment
          command: |
            setup-kube-auth
            kubectl config use-context staging
      - deploy:
          name: Deploy laa-cla-public docker image
          command: |
            safe_git_branch=${CIRCLE_BRANCH//\//-}
            short_sha="$(git rev-parse --short=7 $CIRCLE_SHA1)"

            kubectl set image --filename=kubernetes_deploy/staging/deployment.yml --local --output=yaml \
              app=${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${APPLICATION_DEPLOY_NAME}:$safe_git_branch.$short_sha | \
              kubectl apply \
                --filename=- \
                --filename=kubernetes_deploy/staging/service.yml \
                --filename=kubernetes_deploy/staging/ingress.yml

workflows:
  version: 2
  build_and_test:
    jobs:
      - test
      - build:
          requires:
            - test
      - staging_deploy_approval:
          type: approval
          requires:
            - build
      - staging_deploy:
          requires:
            - staging_deploy_approval
